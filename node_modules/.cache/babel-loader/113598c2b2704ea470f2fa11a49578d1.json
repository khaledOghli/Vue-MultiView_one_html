{"ast":null,"code":"import { toRefs } from 'composition-api';\nimport isNullish from './../utils/isNullish';\nexport default function useData(props, context, dep) {\n  const {\n    object,\n    valueProp,\n    mode\n  } = toRefs(props); // ============ DEPENDENCIES ============\n\n  const iv = dep.iv; // =============== METHODS ==============\n\n  const update = val => {\n    // Setting object(s) as internal value\n    iv.value = makeInternal(val); // Setting object(s) or plain value as external \n    // value based on `option` setting\n\n    const externalVal = makeExternal(val);\n    context.emit('change', externalVal);\n    context.emit('input', externalVal);\n    context.emit('update:modelValue', externalVal);\n  }; // no export\n\n\n  const makeExternal = val => {\n    // If external value should be object\n    // no transformation is required\n    if (object.value) {\n      return val;\n    } // No need to transform if empty value\n\n\n    if (isNullish(val)) {\n      return val;\n    } // If external should be plain transform\n    // value object to plain values\n\n\n    return !Array.isArray(val) ? val[valueProp.value] : val.map(v => v[valueProp.value]);\n  }; // no export\n\n\n  const makeInternal = val => {\n    if (isNullish(val)) {\n      return mode.value === 'single' ? {} : [];\n    }\n\n    return val;\n  };\n\n  return {\n    update\n  };\n}","map":{"version":3,"sources":["/Users/khaledoghli/Desktop/webpack/vue-js/hello-js/node_modules/@vueform/multiselect/src/composables/useData.js"],"names":["toRefs","isNullish","useData","props","context","dep","object","valueProp","mode","iv","update","val","value","makeInternal","externalVal","makeExternal","emit","Array","isArray","map","v"],"mappings":"AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkCC,GAAlC,EACf;AACE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,MAA8BR,MAAM,CAACG,KAAD,CAA1C,CADF,CAGE;;AAEA,QAAMM,EAAE,GAAGJ,GAAG,CAACI,EAAf,CALF,CAOE;;AAEA,QAAMC,MAAM,GAAIC,GAAD,IAAS;AACtB;AACAF,IAAAA,EAAE,CAACG,KAAH,GAAWC,YAAY,CAACF,GAAD,CAAvB,CAFsB,CAItB;AACA;;AACA,UAAMG,WAAW,GAAGC,YAAY,CAACJ,GAAD,CAAhC;AAEAP,IAAAA,OAAO,CAACY,IAAR,CAAa,QAAb,EAAuBF,WAAvB;AACAV,IAAAA,OAAO,CAACY,IAAR,CAAa,OAAb,EAAsBF,WAAtB;AACAV,IAAAA,OAAO,CAACY,IAAR,CAAa,mBAAb,EAAkCF,WAAlC;AACD,GAXD,CATF,CAsBE;;;AACA,QAAMC,YAAY,GAAIJ,GAAD,IAAS;AAC5B;AACA;AACA,QAAIL,MAAM,CAACM,KAAX,EAAkB;AAChB,aAAOD,GAAP;AACD,KAL2B,CAO5B;;;AACA,QAAIV,SAAS,CAACU,GAAD,CAAb,EAAoB;AAClB,aAAOA,GAAP;AACD,KAV2B,CAY5B;AACA;;;AACA,WAAO,CAACM,KAAK,CAACC,OAAN,CAAcP,GAAd,CAAD,GAAsBA,GAAG,CAACJ,SAAS,CAACK,KAAX,CAAzB,GAA6CD,GAAG,CAACQ,GAAJ,CAAQC,CAAC,IAAIA,CAAC,CAACb,SAAS,CAACK,KAAX,CAAd,CAApD;AACD,GAfD,CAvBF,CAwCE;;;AACA,QAAMC,YAAY,GAAIF,GAAD,IAAS;AAC5B,QAAIV,SAAS,CAACU,GAAD,CAAb,EAAoB;AAClB,aAAOH,IAAI,CAACI,KAAL,KAAe,QAAf,GAA0B,EAA1B,GAA+B,EAAtC;AACD;;AAED,WAAOD,GAAP;AACD,GAND;;AAQA,SAAO;AACLD,IAAAA;AADK,GAAP;AAGD","sourcesContent":["import { toRefs } from 'composition-api'\nimport isNullish from './../utils/isNullish'\n\nexport default function useData (props, context, dep)\n{\n  const { object, valueProp, mode } = toRefs(props)\n\n  // ============ DEPENDENCIES ============\n\n  const iv = dep.iv\n\n  // =============== METHODS ==============\n\n  const update = (val) => {\n    // Setting object(s) as internal value\n    iv.value = makeInternal(val)\n\n    // Setting object(s) or plain value as external \n    // value based on `option` setting\n    const externalVal = makeExternal(val)\n\n    context.emit('change', externalVal)\n    context.emit('input', externalVal)\n    context.emit('update:modelValue', externalVal)\n  } \n\n  // no export\n  const makeExternal = (val) => {\n    // If external value should be object\n    // no transformation is required\n    if (object.value) {\n      return val\n    }\n\n    // No need to transform if empty value\n    if (isNullish(val)) {\n      return val\n    }\n\n    // If external should be plain transform\n    // value object to plain values\n    return !Array.isArray(val) ? val[valueProp.value] : val.map(v => v[valueProp.value])\n  }\n\n  // no export\n  const makeInternal = (val) => {\n    if (isNullish(val)) {\n      return mode.value === 'single' ? {} : []\n    }\n\n    return val\n  }\n\n  return {\n    update,\n  }\n}"]},"metadata":{},"sourceType":"module"}