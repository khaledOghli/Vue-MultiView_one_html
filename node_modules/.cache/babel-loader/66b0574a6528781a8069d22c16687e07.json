{"ast":null,"code":"import useData from './composables/useData';\nimport useValue from './composables/useValue';\nimport useSearch from './composables/useSearch';\nimport usePointer from './composables/usePointer';\nimport useOptions from './composables/useOptions';\nimport usePointerAction from './composables/usePointerAction';\nimport useDropdown from './composables/useDropdown';\nimport useMultiselect from './composables/useMultiselect';\nimport useKeyboard from './composables/useKeyboard';\nimport useClasses from './composables/useClasses';\nexport default {\n  name: 'Multiselect',\n  emits: ['open', 'close', 'select', 'deselect', 'input', 'search-change', 'tag', 'option', 'update:modelValue', 'change', 'clear'],\n  props: {\n    value: {\n      required: false\n    },\n    modelValue: {\n      required: false\n    },\n    options: {\n      type: [Array, Object, Function],\n      required: false,\n      default: () => []\n    },\n    id: {\n      type: [String, Number],\n      required: false\n    },\n    name: {\n      type: [String, Number],\n      required: false,\n      default: 'multiselect'\n    },\n    disabled: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    label: {\n      type: String,\n      required: false,\n      default: 'label'\n    },\n    trackBy: {\n      type: String,\n      required: false,\n      default: undefined\n    },\n    valueProp: {\n      type: String,\n      required: false,\n      default: 'value'\n    },\n    placeholder: {\n      type: String,\n      required: false,\n      default: null\n    },\n    mode: {\n      type: String,\n      required: false,\n      default: 'single' // single|multiple|tags\n\n    },\n    searchable: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    limit: {\n      type: Number,\n      required: false,\n      default: -1\n    },\n    hideSelected: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    createTag: {\n      type: Boolean,\n      required: false,\n      default: undefined\n    },\n    createOption: {\n      type: Boolean,\n      required: false,\n      default: undefined\n    },\n    appendNewTag: {\n      type: Boolean,\n      required: false,\n      default: undefined\n    },\n    appendNewOption: {\n      type: Boolean,\n      required: false,\n      default: undefined\n    },\n    addTagOn: {\n      type: Array,\n      required: false,\n      default: undefined\n    },\n    addOptionOn: {\n      type: Array,\n      required: false,\n      default: undefined\n    },\n    caret: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    loading: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    noOptionsText: {\n      type: String,\n      required: false,\n      default: 'The list is empty'\n    },\n    noResultsText: {\n      type: String,\n      required: false,\n      default: 'No results found'\n    },\n    multipleLabel: {\n      type: Function,\n      required: false\n    },\n    object: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    delay: {\n      type: Number,\n      required: false,\n      default: -1\n    },\n    minChars: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    resolveOnLoad: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    filterResults: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    clearOnSearch: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    clearOnSelect: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    canDeselect: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    canClear: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    max: {\n      type: Number,\n      required: false,\n      default: -1\n    },\n    showOptions: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    required: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    openDirection: {\n      type: String,\n      required: false,\n      default: 'bottom'\n    },\n    nativeSupport: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    classes: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    strict: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    closeOnSelect: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    autocomplete: {\n      type: String,\n      required: false\n    },\n    groups: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    groupLabel: {\n      type: String,\n      required: false,\n      default: 'label'\n    },\n    groupOptions: {\n      type: String,\n      required: false,\n      default: 'options'\n    },\n    groupHideEmpty: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    groupSelect: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    inputType: {\n      type: String,\n      required: false,\n      default: 'text'\n    },\n    attrs: {\n      required: false,\n      type: [Object],\n      default: () => ({})\n    }\n  },\n\n  setup(props, context) {\n    const value = useValue(props, context);\n    const pointer = usePointer(props, context);\n    const dropdown = useDropdown(props, context);\n    const search = useSearch(props, context);\n    const data = useData(props, context, {\n      iv: value.iv\n    });\n    const multiselect = useMultiselect(props, context, {\n      input: search.input,\n      open: dropdown.open,\n      close: dropdown.close,\n      clearSearch: search.clearSearch\n    });\n    const options = useOptions(props, context, {\n      ev: value.ev,\n      iv: value.iv,\n      search: search.search,\n      clearSearch: search.clearSearch,\n      update: data.update,\n      pointer: pointer.pointer,\n      clearPointer: pointer.clearPointer,\n      blur: multiselect.blur,\n      focus: multiselect.focus,\n      deactivate: multiselect.deactivate\n    });\n    const pointerAction = usePointerAction(props, context, {\n      fo: options.fo,\n      fg: options.fg,\n      handleOptionClick: options.handleOptionClick,\n      handleGroupClick: options.handleGroupClick,\n      search: search.search,\n      pointer: pointer.pointer,\n      setPointer: pointer.setPointer,\n      clearPointer: pointer.clearPointer,\n      multiselect: multiselect.multiselect\n    });\n    const keyboard = useKeyboard(props, context, {\n      iv: value.iv,\n      update: data.update,\n      search: search.search,\n      setPointer: pointer.setPointer,\n      selectPointer: pointerAction.selectPointer,\n      backwardPointer: pointerAction.backwardPointer,\n      forwardPointer: pointerAction.forwardPointer,\n      blur: multiselect.blur,\n      fo: options.fo\n    });\n    const classes = useClasses(props, context, {\n      isOpen: dropdown.isOpen,\n      isPointed: pointerAction.isPointed,\n      canPointGroups: pointerAction.canPointGroups,\n      isSelected: options.isSelected,\n      isDisabled: options.isDisabled,\n      isActive: multiselect.isActive,\n      resolving: options.resolving,\n      fo: options.fo\n    });\n    return { ...value,\n      ...dropdown,\n      ...multiselect,\n      ...pointer,\n      ...data,\n      ...search,\n      ...options,\n      ...pointerAction,\n      ...keyboard,\n      ...classes\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["useData","useValue","useSearch","usePointer","useOptions","usePointerAction","useDropdown","useMultiselect","useKeyboard","useClasses","name","emits","props","value","required","modelValue","options","type","Array","Object","Function","default","id","String","Number","disabled","Boolean","label","trackBy","undefined","valueProp","placeholder","mode","searchable","limit","hideSelected","createTag","createOption","appendNewTag","appendNewOption","addTagOn","addOptionOn","caret","loading","noOptionsText","noResultsText","multipleLabel","object","delay","minChars","resolveOnLoad","filterResults","clearOnSearch","clearOnSelect","canDeselect","canClear","max","showOptions","openDirection","nativeSupport","classes","strict","closeOnSelect","autocomplete","groups","groupLabel","groupOptions","groupHideEmpty","groupSelect","inputType","attrs","setup","context","pointer","dropdown","search","data","iv","multiselect","input","open","close","clearSearch","ev","update","clearPointer","blur","focus","deactivate","pointerAction","fo","fg","handleOptionClick","handleGroupClick","setPointer","keyboard","selectPointer","backwardPointer","forwardPointer","isOpen","isPointed","canPointGroups","isSelected","isDisabled","isActive","resolving"],"sourceRoot":"","sources":["/Users/khaledoghli/Desktop/webpack/vue-js/hello-js/node_modules/@vueform/multiselect/src/Multiselect.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"multiselect\"\n    :tabindex=\"tabindex\"\n    :class=\"classList.container\"\n    :id=\"id\"\n    @focusin=\"activate\"\n    @focusout=\"deactivate\"\n    @keydown=\"handleKeydown\"\n    @focus=\"handleFocus\"\n  >\n    <!-- Search -->\n    <template v-if=\"mode !== 'tags' && searchable && !disabled\">\n      <input\n        :type=\"inputType\"\n        :modelValue=\"search\"\n        :value=\"search\"\n        :class=\"classList.search\"\n        :autocomplete=\"autocomplete\"\n        v-bind=\"attrs\"\n        @input=\"handleSearchInput\"\n        @paste.stop=\"handlePaste\"\n        ref=\"input\"\n      />\n    </template>\n\n    <!-- Tags (with search) -->\n    <template v-if=\"mode == 'tags'\">\n      <div :class=\"classList.tags\">\n\n        <slot\n          v-for=\"(option, i, key) in iv\"\n          name=\"tag\"\n          :option=\"option\"\n          :handleTagRemove=\"handleTagRemove\"\n          :disabled=\"disabled\"\n        >\n          <span :class=\"classList.tag\" :key=\"key\">\n            {{ option[label] }}\n            <span\n              v-if=\"!disabled\"\n              :class=\"classList.tagRemove\"\n              @click=\"handleTagRemove(option, $event)\"\n            >\n              <span :class=\"classList.tagRemoveIcon\"></span>\n            </span>\n          </span>\n        </slot>\n    \n        <div :class=\"classList.tagsSearchWrapper\">\n          <!-- Used for measuring search width -->\n          <span :class=\"classList.tagsSearchCopy\">{{ search }}</span>\n\n          <!-- Actual search input -->\n          <input    \n            v-if=\"searchable && !disabled\"\n            :type=\"inputType\"\n            :modelValue=\"search\"\n            :value=\"search\"\n            :class=\"classList.tagsSearch\"\n            :autocomplete=\"autocomplete\"\n            v-bind=\"attrs\"\n            @input=\"handleSearchInput\"\n            @paste.stop=\"handlePaste\"\n            ref=\"input\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <!-- Single label -->\n    <template v-if=\"mode == 'single' && hasSelected && !search && iv\">\n      <slot name=\"singlelabel\" :value=\"iv\">\n        <div :class=\"classList.singleLabel\">\n          <span :class=\"classList.singleLabelText\">{{ iv[label] }}</span>\n        </div>\n      </slot>\n    </template>\n\n    <!-- Multiple label -->\n    <template v-if=\"mode == 'multiple' && hasSelected && !search\">\n      <slot name=\"multiplelabel\" :values=\"iv\">\n        <div :class=\"classList.multipleLabel\">\n          {{ multipleLabelText }}\n        </div>\n      </slot>\n    </template>\n\n    <!-- Placeholder -->\n    <template v-if=\"placeholder && !hasSelected && !search\">\n      <slot name=\"placeholder\">\n        <div :class=\"classList.placeholder\">\n          {{ placeholder }}\n        </div>\n      </slot>\n    </template>\n\n    <!-- Spinner -->\n    <slot v-if=\"busy && isActive\" name=\"spinner\">\n      <span :class=\"classList.spinner\"></span>\n    </slot>\n\n    <!-- Clear -->\n    <slot v-if=\"hasSelected && !disabled && canClear && !busy\" name=\"clear\" :clear=\"clear\">\n      <span :class=\"classList.clear\" @mousedown=\"clear\"><span :class=\"classList.clearIcon\"></span></span>\n    </slot>\n\n    <!-- Caret -->\n    <slot v-if=\"caret && showOptions\" name=\"caret\">\n      <span :class=\"classList.caret\" @click=\"handleCaretClick\"></span>\n    </slot>\n\n    <!-- Options -->\n    <div\n      :class=\"classList.dropdown\"\n      tabindex=\"-1\"\n    >\n      <slot name=\"beforelist\" :options=\"fo\"></slot>\n\n      <ul :class=\"classList.options\">\n        <template v-if=\"groups\">\n          <li\n            v-for=\"(group, i, key) in fg\"\n            :class=\"classList.group\"\n            :key=\"key\"\n          >\n            <div\n              :class=\"classList.groupLabel(group)\"\n              :data-pointed=\"isPointed(group)\"\n              @mouseenter=\"setPointer(group)\"\n              @click=\"handleGroupClick(group)\"\n            >\n              <slot name=\"grouplabel\" :group=\"group\">\n                <span>{{ group[groupLabel] }}</span>\n              </slot>\n            </div>\n\n            <ul :class=\"classList.groupOptions\">\n              <li\n                v-for=\"(option, i, key) in group.__VISIBLE__\"\n                :class=\"classList.option(option, group)\"\n                :key=\"key\"\n                :data-pointed=\"isPointed(option)\"\n                @mouseenter=\"setPointer(option)\"\n                @click=\"handleOptionClick(option)\"\n              >\n                <slot name=\"option\" :option=\"option\" :search=\"search\">\n                  <span>{{ option[label] }}</span>\n                </slot>\n              </li>\n            </ul>\n          </li>\n        </template>\n        <template v-else>\n          <li\n            v-for=\"(option, i, key) in fo\"\n            :class=\"classList.option(option)\"\n            :key=\"key\"\n            :data-pointed=\"isPointed(option)\"\n            @mouseenter=\"setPointer(option)\"\n            @click=\"handleOptionClick(option)\"\n          >\n            <slot name=\"option\" :option=\"option\" :search=\"search\">\n              <span>{{ option[label] }}</span>\n            </slot>\n          </li>\n        </template>\n      </ul>\n\n      <slot v-if=\"noOptions\" name=\"nooptions\">\n        <div :class=\"classList.noOptions\" v-html=\"noOptionsText\"></div>\n      </slot>\n\n      <slot v-if=\"noResults\" name=\"noresults\">\n        <div :class=\"classList.noResults\" v-html=\"noResultsText\"></div>\n      </slot>\n\n      <slot name=\"afterlist\" :options=\"fo\"></slot>\n    </div>\n\n    <!-- Hacky input element to show HTML5 required warning -->\n    <input v-if=\"required\" :class=\"classList.fakeInput\" tabindex=\"-1\" :value=\"textValue\" required/>\n    \n    <!-- Native input support -->\n    <template v-if=\"nativeSupport\">\n      <input v-if=\"mode == 'single'\" type=\"hidden\" :name=\"name\" :value=\"plainValue !== undefined ? plainValue : ''\" />\n      <template v-else>\n        <input v-for=\"(v, i) in plainValue\" type=\"hidden\" :name=\"`${name}[]`\" :value=\"v\" :key=\"i\" />\n      </template>\n    </template>\n\n    <!-- Create height for empty input -->\n    <div :class=\"classList.spacer\"></div>\n\n  </div>\n</template>\n\n<script>\n  import useData from './composables/useData'\n  import useValue from './composables/useValue'\n  import useSearch from './composables/useSearch'\n  import usePointer from './composables/usePointer'\n  import useOptions from './composables/useOptions'\n  import usePointerAction from './composables/usePointerAction'\n  import useDropdown from './composables/useDropdown'\n  import useMultiselect from './composables/useMultiselect'\n  import useKeyboard from './composables/useKeyboard' \n  import useClasses from './composables/useClasses' \n\n  export default {\n    name: 'Multiselect',\n    emits: [\n      'open', 'close', 'select', 'deselect', \n      'input', 'search-change', 'tag', 'option', 'update:modelValue',\n      'change', 'clear'\n    ],\n    props: {\n      value: {\n        required: false,\n      },\n      modelValue: {\n        required: false,\n      },\n      options: {\n        type: [Array, Object, Function],\n        required: false,\n        default: () => ([])\n      },\n      id: {\n        type: [String, Number],\n        required: false,\n      },\n      name: {\n        type: [String, Number],\n        required: false,\n        default: 'multiselect',\n      },\n      disabled: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      label: {\n        type: String,\n        required: false,\n        default: 'label',\n      },\n      trackBy: {\n        type: String,\n        required: false,\n        default: undefined,\n      },\n      valueProp: {\n        type: String,\n        required: false,\n        default: 'value',\n      },\n      placeholder: {\n        type: String,\n        required: false,\n        default: null,\n      },\n      mode: {\n        type: String,\n        required: false,\n        default: 'single', // single|multiple|tags\n      },\n      searchable: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      limit: {\n        type: Number,\n        required: false,\n        default: -1,\n      },\n      hideSelected: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      createTag: {\n        type: Boolean,\n        required: false,\n        default: undefined,\n      },\n      createOption: {\n        type: Boolean,\n        required: false,\n        default: undefined,\n      },\n      appendNewTag: {\n        type: Boolean,\n        required: false,\n        default: undefined,\n      },\n      appendNewOption: {\n        type: Boolean,\n        required: false,\n        default: undefined,\n      },\n      addTagOn: {\n        type: Array,\n        required: false,\n        default: undefined,\n      },\n      addOptionOn: {\n        type: Array,\n        required: false,\n        default: undefined,\n      },\n      caret: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      loading: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      noOptionsText: {\n        type: String,\n        required: false,\n        default: 'The list is empty',\n      },\n      noResultsText: {\n        type: String,\n        required: false,\n        default: 'No results found',\n      },\n      multipleLabel: {\n        type: Function,\n        required: false,\n      },\n      object: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      delay: {\n        type: Number,\n        required: false,\n        default: -1,\n      },\n      minChars: {\n        type: Number,\n        required: false,\n        default: 0,\n      },\n      resolveOnLoad: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      filterResults: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      clearOnSearch: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      clearOnSelect: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      canDeselect: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      canClear: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      max: {\n        type: Number,\n        required: false,\n        default: -1,\n      },\n      showOptions: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      required: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      openDirection: {\n        type: String,\n        required: false,\n        default: 'bottom',\n      },\n      nativeSupport: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      classes: {\n        type: Object,\n        required: false,\n        default: () => ({})\n      },\n      strict: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      closeOnSelect: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      autocomplete: {\n        type: String,\n        required: false,\n      },\n      groups: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      groupLabel: {\n        type: String,\n        required: false,\n        default: 'label',\n      },\n      groupOptions: {\n        type: String,\n        required: false,\n        default: 'options',\n      },\n      groupHideEmpty: {\n        type: Boolean,\n        required: false,\n        default: false,\n      },\n      groupSelect: {\n        type: Boolean,\n        required: false,\n        default: true,\n      },\n      inputType: {\n        type: String,\n        required: false,\n        default: 'text',\n      },\n      attrs: {\n        required: false,\n        type: [Object],\n        default: () => ({}),\n      },\n    },\n    setup(props, context)\n    { \n      const value = useValue(props, context)\n      const pointer = usePointer(props, context)\n      const dropdown = useDropdown(props, context)\n      const search = useSearch(props, context)\n\n      const data = useData(props, context, {\n        iv: value.iv,\n      })\n\n      const multiselect = useMultiselect(props, context, {\n        input: search.input,\n        open: dropdown.open,\n        close: dropdown.close,\n        clearSearch: search.clearSearch,\n      })\n\n      const options = useOptions(props, context, {\n        ev: value.ev,\n        iv: value.iv,\n        search: search.search,\n        clearSearch: search.clearSearch,\n        update: data.update,\n        pointer: pointer.pointer,\n        clearPointer: pointer.clearPointer,\n        blur: multiselect.blur,\n        focus: multiselect.focus,\n        deactivate: multiselect.deactivate,\n      })\n\n      const pointerAction = usePointerAction(props, context, {\n        fo: options.fo,\n        fg: options.fg,\n        handleOptionClick: options.handleOptionClick,\n        handleGroupClick: options.handleGroupClick,\n        search: search.search,\n        pointer: pointer.pointer,\n        setPointer: pointer.setPointer,\n        clearPointer: pointer.clearPointer,\n        multiselect: multiselect.multiselect,\n      })\n\n      const keyboard = useKeyboard(props, context, {\n        iv: value.iv,\n        update: data.update,\n        search: search.search,\n        setPointer: pointer.setPointer,\n        selectPointer: pointerAction.selectPointer,\n        backwardPointer: pointerAction.backwardPointer,\n        forwardPointer: pointerAction.forwardPointer,\n        blur: multiselect.blur,\n        fo: options.fo,\n      })\n\n      const classes = useClasses(props, context, {\n        isOpen: dropdown.isOpen,\n        isPointed: pointerAction.isPointed,\n        canPointGroups: pointerAction.canPointGroups,\n        isSelected: options.isSelected,\n        isDisabled: options.isDisabled,\n        isActive: multiselect.isActive,\n        resolving: options.resolving,\n        fo: options.fo,\n      })\n\n      return {\n        ...value,\n        ...dropdown,\n        ...multiselect,\n        ...pointer,\n        ...data,\n        ...search,\n        ...options,\n        ...pointerAction,\n        ...keyboard,\n        ...classes,\n      }\n    }\n  }\n</script>"]},"metadata":{},"sourceType":"module"}